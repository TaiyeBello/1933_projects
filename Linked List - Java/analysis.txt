Written by bello067

Method                                   ArrayList Runtime    LinkedList Runtime             Explanation
boolean add(T element)                   O(1)                 O(n)                           For the array list as the number of elements increases the runtime stays the same. The linked list methods grow linearly in proportion to the size of the number of elements in the list.
boolean add(int index, T element)        O(n)                 O(n)                           Both these methods grow linearly in proportion to the size of the number of elements in the list.
void clear()                             O(n)                 O(1)                           For the array list the method grows linearly in proportion to the size of the number of elements in the list. For the linked list the method will always execute in the same amount of time regardless of the number of elements in the list.
boolean contains(T element);             O(n)                 O(n)                           For the array list in the worst case the method grows linearly in proportion to the size of the number of elements in the list. For the linked list the comparison of the while loop happens n times.
T get(int index);                        O(1)                 O(n)                           For the array list the method will always execute in the same amount of time regardless of the number of elements in the list. For the linked list the method grows linearly in proportion to the size of the number of elements in the list.
int indexOf(T element);                  O(n)                 O(n)                           For the array list binary search is used but on average the list is not sorted. For the linked list most of the time the list is not sorted so the method grows linearly in proportion to the size of the number of elements in the list.
boolean isEmpty();                       O(1)                 O(1)                           For the array list and linked list the method will always execute in the same amount of time regardless of the number of elements in the list.
int lastIndexOf(T element);              O(n)                 O(n)                           For the array list binary search is used but most of the time the list is not sorted. For the linked list the method grows linearly in proportion to the size of the number of elements in the list.
T set(int index, T element);             O(1)                 O(n)                           For the array list the method will always execute in the same amount of time regardless of the number of elements in the list. For the linked list the method grows linearly in proportion to the size of the number of elements in the list.
int size();                              O(1)                 O(1)                           For the array list and linked list the method will always execute in the same amount of time regardless of the number of elements in the list.
void sort(boolean order);                O(n^2)               O(n^2)                         For both methods bubble sort was used, to implement the sort method a nested for loop is used.
boolean remove(T element);               O(n)                 O(n)                           Both these methods grow linearly in proportion to the size of the number of elements in the list.
T remove(int index);                     O(n)                 O(n)                           Both these methods grow linearly in proportion to the size of the number of elements in the list.
String toString();                       O(n)                 O(n)                           Both these methods grow linearly in proportion to the size of the number of elements in the list.